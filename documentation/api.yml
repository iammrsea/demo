openapi: 3.0.3
info:
  title: Dangiwa API Documentation
  description: This is the API documentation for Dangiwa App
  contact:
    - name: API Support
    - email: andrew.ekwugha@lumilab.ng or ekwughaandrew@gmail.com
  version: 1.0.0
servers:
  - url: /api/v1

tags:
  - name: Specification
    description: The Swagger API Specification (version 3.0.3)
  - name: General Information
    description: >
      - 1) **Variable Naming:**
        i) All request bodies of the endpoints, but 'POST /payment', are camelCased e.g firstName, lastName etc
        ii) All response bodies are snake_cased e.g first_name, last_name etc.
      - 2) **Lock Icon:** The lock icon indicates protected routes/endpoints. In order to make an authenticated
          request, click the **Authorize** button or the lock icon and enter/paste your token. The token
          is returned as part of the payload after a successful login.
      - 3) **Authorization:** In order to ensure predictable response payloads from the endpoints,
          you are advised to make all API requests with users' tokens when they are logged in. This
          is to enable the app to carry out silent authentication and return tailored results based
          on the user's role. For instance, vendor A shouldn't be able to see food listings of vendor B if
          they are logged in to the app as vendor A, and vice versa.

paths:
  #Authentication routes
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: Logins in user with their email/phone number and password
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
               login with email:
                  value:
                    email: 'example@gmail.com'
                    password: 'example'
               login with phone number:
                  value:
                    phoneNumber: '08056362539'
                    password: 'example'
      responses:
        200:
          description: Ok, user successfully logged in
          content:
            application/json:
              schema:
              example:
                  {
                      "user_id": 11,
                      "token": "MjQ.P6KOGCL9myibgGAsnsGM-eT3fBpyMDK3KQ1KquVkbQZRnCRVXtnqoW6R4q9v",
                      "email": "Sigurd.Walker@yahoo.com",
                      "phone_number": "404-721-5258 x30900",
                      "role": "driver",
                      "created_at": "2020-12-04T11:00:40.401+01:00"
                  }

        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/register:
    post:
      tags:
        - Authentication
      summary: User Registration/Sign up
      description: Registers or signs up a new user with their phone number and password
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              phoneNumber: 080835274833
              password: "johndoe"
              isDriver: true
      responses:
        200:
          description: Ok, user successfully registered
          content:
            application/json:
              schema:
              examples:
                driver:
                  value:
                    {
                        "user_id": 11,
                        "token": "MjQ.P6KOGCL9myibgGAsnsGM-eT3fBpyMDK3KQ1KquVkbQZRnCRVXtnqoW6R4q9v",
                        "email": "Sigurd.Walker@yahoo.com",
                        "phone_number": "404-721-5258 x30900",
                        "role": "driver",
                        "created_at": "2020-12-04T11:00:40.401+01:00"
                    }
                rider:
                  value:
                    {
                      "user_id": 11,
                      "token": "MjQ.P6KOGCL9myibgGAsnsGM-eT3fBpyMDK3KQ1KquVkbQZRnCRVXtnqoW6R4q9v",
                      "email": "Sigurd.Walker@yahoo.com",
                      "phone_number": "404-721-5258 x30900",
                      "role": "rider",
                      "created_at": "2020-12-04T11:00:40.401+01:00"
                    }

        422:
          description: Unprocessible entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomError"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/logout:
    delete:
      tags:
        - Authentication
      summary: Logs out user
      description: >
        Logs out an authenticated user by deleting their token
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        200:
          description: Ok, user successfully logged out.
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Riders related routes
  /riders:
    get:
      tags:
        - Riders
      summary: Gets list of riders
      description: >
        Returns a paginated list of riders
      operationId: getRiders
      parameters:
          - $ref: '#/components/parameters/limitParam'
          - $ref: '#/components/parameters/pageParam'
      responses:
        200:
          description: >
            This is the paginated list of riders
          content:
            application/json:
              example:
                {
                  'meta':
                    {
                      'total': 2,
                      'per_page': 10,
                      'current_page': 1,
                      'last_page': 1,
                      'first_page': 1,
                      'first_page_url': '/?page=1',
                      'last_page_url': '/?page=1',
                      'next_page_url': null,
                      'previous_page_url': null,
                    },
                  'data':
                    [
                        {
                          'id': 1,
                          'first_name': 'Asia',
                          'last_name': 'Blanda',
                          'address': 'Streichfurt',
                          'bvn': '1234569873645',
                          'created_at': '2020-12-04T11:00:48.572+01:00',
                          'updated_at': '2020-12-04T11:00:48.572+01:00',
                          'role': 'rider',
                          'email': 'Euna62@gmail.com',
                          'phone_number': '273-829-7238 x801',
                        }
                    ],
                }
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /riders/{id}:
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      tags:
        - Riders
      summary: Gets a rider by their id
      description: >
        Returns rider by their id
      operationId: riderById
      responses:
        200:
          description: >
            Ok, successful. 
          content:
            application/json:
              schema:
               example:
                 {
                  'id': 1,
                  'first_name': 'Asia',
                  'last_name': 'Blanda',
                  'address': 'Streichfurt',
                  'bvn': '1234569873645',
                  'created_at': '2020-12-04T11:00:48.572+01:00',
                  'updated_at': '2020-12-04T11:00:48.572+01:00',
                  'email': 'Euna62@gmail.com',
                  'phone_number': '273-829-7238 x801',
                }
        404:
          description: No users found matching the id parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"      
    put:
      security:
        - bearerAuth: []
      tags:
        - Riders
      summary: Updates a rider's profile information
      description: >
        Updates a rider's information based on their id. All fields of the request body are optional. This operation can only be carried out by the owner of the profile when they are logged in.
      operationId: updateRiderById
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RiderProfile'

      responses:
        200:
          description: Ok, rider successfully updated
          content:
            application/json:
              schema:
              example:
                {
                  "id": 1,
                  "first_name": "Jane",
                  "last_name": "Doe",
                  "address": "Streichfurt",
                  "bvn": "1234569873645",
                  "created_at": "2020-12-04T11:00:48.572+01:00",
                  "updated_at": "2020-12-06T04:49:20.229+01:00",
                  "profilePicture": {
                    "id": 1,
                    "url": "https://ik.imagekit.io/trsuszcduc/saferide/users/cam1_u0eVBFHLN.jpeg",
                    "file_id": "5fcc54e42a1d1e3e46f6ed1f",
                    "thumbnail_url": "https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/saferide/users/cam1_u0eVBFHLN.jpeg",
                    "created_at": "2020-12-06T04:49:21.067+01:00",
                    "updated_at": "2020-12-06T04:49:21.067+01:00"
                  },
                  "email": "Euna62@gmail.com",
                  "phone_number": "273-829-7238 x801",
                  "role": "rider"
                }

        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #Drivers related routes
  /drivers:
    get:
      tags:
        - Drivers
      summary: Gets list of drivers
      description: >
        Returns a paginated list of drivers
      operationId: getDrivers
      parameters:
          - $ref: '#/components/parameters/limitParam'
          - $ref: '#/components/parameters/pageParam'
      responses:
        200:
          description: >
            This is the paginated list of drivers
          content:
            application/json:
              example:
                {
                  'meta':
                    {
                      'total': 2,
                      'per_page': 10,
                      'current_page': 1,
                      'last_page': 1,
                      'first_page': 1,
                      'first_page_url': '/?page=1',
                      'last_page_url': '/?page=1',
                      'next_page_url': null,
                      'previous_page_url': null,
                    },
                  'data':
                    [
                       {
                          'id': 1,
                          'full_name': 'PercivalGleason',
                          'bvn': '1234569873645',
                          'verified': false,
                          'suspended': false,
                          'created_at': '2020-12-04T11:00:27.523+01:00',
                          'updated_at': '2020-12-04T11:00:27.523+01:00',
                          'address':
                            {
                              'id': 1,
                              'state': 'New Jersey',
                              'lga': 'Avon',
                              'home_address': '9328 Michaela Knolls Suite 704',
                              'driver_id': 1,
                              'created_at': '2020-12-04T11:00:27.534+01:00',
                              'updated_at': '2020-12-04T11:00:27.534+01:00',
                            },
                          'vehicle':
                            {
                              'id': 1,
                              'vehicle_type': 'bike',
                              'model_number': 'Land Cruiser',
                              'plate_number': 'PFLIR5DC9ZRG32946',
                              'color': 'maroon',
                              'driver_id': 1,
                              'created_at': '2020-12-04T11:00:27.545+01:00',
                              'updated_at': '2020-12-04T11:00:27.545+01:00',
                            },
                          'role': 'driver',
                          'email': 'Zoie2@hotmail.com',
                          'phone_number': '541-761-6433 x303',
                        }

                    ],
                }
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /drivers/{id}:
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      tags:
        - Drivers
      summary: Gets a driver by their id
      description: >
        Returns driver by their id
      operationId: driverById
      responses:
        200:
          description: >
            Ok, successful. 
          content:
            application/json:
              schema:
               example:
                 {
                    'id': 1,
                    'full_name': 'Percival Gleason',
                    'bvn': '1234569873645',
                    'verified': false,
                    'suspended': false,
                    'created_at': '2020-12-04T11:00:27.523+01:00',
                    'updated_at': '2020-12-04T11:00:27.523+01:00',
                    'address':
                      {
                        'id': 1,
                        'state': 'New Jersey',
                        'lga': 'Avon',
                        'home_address': '9328 Michaela Knolls Suite 704',
                        'driver_id': 1,
                        'created_at': '2020-12-04T11:00:27.534+01:00',
                        'updated_at': '2020-12-04T11:00:27.534+01:00',
                      },
                    'vehicle':
                      {
                        'id': 1,
                        'vehicle_type': 'bike',
                        'model_number': 'Land Cruiser',
                        'plate_number': 'PFLIR5DC9ZRG32946',
                        'color': 'maroon',
                        'driver_id': 1,
                        'created_at': '2020-12-04T11:00:27.545+01:00',
                        'updated_at': '2020-12-04T11:00:27.545+01:00',
                      },
                    'documents': [],
                    'email': 'Zoie2@hotmail.com',
                    'phone_number': '541-761-6433 x303',
                  }

        404:
          description: No users found matching the id parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"      
    put:
      security:
        - bearerAuth: []
      tags:
        - Drivers
      summary: Updates a driver's profile information
      description: >
        Updates a driver's information based on their id. All fields of the request body are optional. This operation can only be carried out by the owner of the profile when they are logged in.
      operationId: updateDriverById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DriverProfile'

      responses:
        200:
          description: Ok, driver successfully updated
          content:
            application/json:
              schema:
              example:
                {
                  "id": 1,
                  "full_name": "Percival Gleason",
                  "bvn": "1234569873645",
                  "verified": false,
                  "suspended": false,
                  "created_at": "2020-12-04T11:00:27.523+01:00",
                  "updated_at": "2020-12-06T05:03:35.239+01:00",
                  "email": "PercivalGleason@gmail.com",
                  "phone_number": "541-761-6433 x303",
                  "role": "driver"
                }

        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /drivers/{id}/address:
    parameters:
      - $ref: '#/components/parameters/idParam'
    put:
      security:
        - bearerAuth: []
      tags:
        - Drivers
      summary: Updates a driver's address information
      description: >
        Updates a driver's address information based on their id. All fields of the request body are required.
      operationId: updateAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DriverAddress'

      responses:
        200:
          description: Ok, rider successfully updated
          content:
            application/json:
              schema:
              example:
                {
                  "id": 1,
                  "state": "New Jersey",
                  "lga": "Avon",
                  "home_address": "9328 Michaela Knolls Suite 704",
                  "created_at": "2020-12-04T11:00:27.534+01:00",
                  "updated_at": "2020-12-04T11:00:27.534+01:00"
                }

        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /drivers/{id}/vehicle:
    parameters:
      - $ref: '#/components/parameters/idParam'
    put:
      security:
        - bearerAuth: []
      tags:
        - Drivers
      summary: Updates a driver's vehicle information
      description: >
        Updates a driver's vehicle information based on their id. All fields of the request body are required.
      operationId: updateVehicle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DriverVehicle'

      responses:
        200:
          description: Ok, driver successfully updated
          content:
            application/json:
              schema:
              example:
                {
                  "id": 1,
                  "vehicle_type": "bike",
                  "model_number": "Land Cruiser",
                  "plate_number": "PFLIR5DC9ZRG32946",
                  "color": "maroon",
                  "created_at": "2020-12-04T11:00:27.545+01:00",
                  "updated_at": "2020-12-04T11:00:27.545+01:00"
                }

        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /drivers/toggle-on:
    put:
      security:
        - bearerAuth: []
      tags:
        - Drivers
      summary: Handles toggle button on driver's dashboard
      description: >
        Gives the driver a means to declare that they are ready for booking for the day
      operationId: toggleOn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Toggle'

      responses:
        200:
          description: Ok, driver successfully updated
          content:
            application/json:
              schema:
              example:
                {
                  "latitude": 40.7676919,
                  "longitude": -73.98513559999999,
                  "address":""
                }

        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /drivers/toggle-off:
    put:
      security:
        - bearerAuth: []
      tags:
        - Drivers
      summary: Handles toggle button on driver's dashboard
      description: >
        Gives the driver a means to declare that they are not ready for booking for the day
      operationId: toggleOff
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Toggle'

      responses:
        200:
          description: Ok, driver successfully updated
          content:
            application/json:
              schema:
              example:
                {
                  "latitude": 40.7676919,
                  "longitude": -73.98513559999999,
                  "address":""
                }

        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /drivers/{id}/personal-data:
    parameters:
      - $ref: '#/components/parameters/idParam'
    put:
      security:
        - bearerAuth: []
      tags:
        - Drivers
      summary: Updates a driver's personal documents 
      description: >
        Updates a driver's prersonal documents based on their id. All fields of the request body are required.
      operationId: updateDocuments
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DriverDocuments'

      responses:
        200:
          description: Ok, driver successfully updated
          content:
            application/json:
              schema:
              example:
                {
                  "id": 1,
                  "full_name": "Percival Gleason",
                  "bvn": "1234569873645",
                  "verified": false,
                  "suspended": false,
                  "created_at": "2020-12-04T11:00:27.523+01:00",
                  "updated_at": "2020-12-06T05:04:08.967+01:00",
                  "documents": [
                    {
                      "id": 1,
                      "url": "https://ik.imagekit.io/trsuszcduc/saferide/drivers/documents/cam2_RgFsH1KKk.jpeg",
                      "file_id": "5fcc62832a1d1e3e46f7670d",
                      "thumbnail_url": "https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/saferide/drivers/documents/cam2_RgFsH1KKk.jpeg",
                      "document_type": "birth_certificate",
                      "trip_vehicle_spec_id": null,
                      "created_at": "2020-12-06T05:47:32.022+01:00",
                      "updated_at": "2020-12-06T05:47:32.022+01:00"
                    },
                    {
                      "id": 2,
                      "url": "https://ik.imagekit.io/trsuszcduc/saferide/drivers/documents/cat3_swZC_GuqW.jpg",
                      "file_id": "5fcc62852a1d1e3e46f76718",
                      "thumbnail_url": "https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/saferide/drivers/documents/cat3_swZC_GuqW.jpg",
                      "document_type": "national_id",
                      "trip_vehicle_spec_id": null,
                      "created_at": "2020-12-06T05:47:32.379+01:00",
                      "updated_at": "2020-12-06T05:47:32.380+01:00"
                    },
                    {
                      "id": 3,
                      "url": "https://ik.imagekit.io/trsuszcduc/saferide/drivers/documents/cat2_WhkBN7MRy.jpg",
                      "file_id": "5fcc62862a1d1e3e46f76723",
                      "thumbnail_url": "https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/saferide/drivers/documents/cat2_WhkBN7MRy.jpg",
                      "document_type": "utility_bill",
                      "trip_vehicle_spec_id": null,
                      "created_at": "2020-12-06T05:47:32.391+01:00",
                      "updated_at": "2020-12-06T05:47:32.391+01:00"
                    },
                    {
                      "id": 4,
                      "url": "https://ik.imagekit.io/trsuszcduc/saferide/drivers/documents/cat1_R9jwpiuT_.jpg",
                      "file_id": "5fcc628844d7155797a4a148",
                      "thumbnail_url": "https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/saferide/drivers/documents/cat1_R9jwpiuT_.jpg",
                      "document_type": "driver_license",
                      "trip_vehicle_spec_id": null,
                      "created_at": "2020-12-06T05:47:32.405+01:00",
                      "updated_at": "2020-12-06T05:47:32.405+01:00"
                    }
                  ],
                  "profilePicture": {
                    "id": 4,
                    "url": "https://ik.imagekit.io/trsuszcduc/saferide/users/cam5_y2UwJJP2z.jpeg",
                    "file_id": "5fcc628b44d7155797a4a153",
                    "thumbnail_url": "https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/saferide/users/cam5_y2UwJJP2z.jpeg",
                    "created_at": "2020-12-06T05:47:34.624+01:00",
                    "updated_at": "2020-12-06T05:47:34.624+01:00"
                  }
                }

        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  
  #Trips routes
  /trips/book:
    post:
      security:
      - bearerAuth: []
      tags:
        - Trips
      summary: Allows a rider to book a trip
      description: >
       Books a trip for the rider
      operationId: bookTrip
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Trip'
      responses:
        200:
          description: Ok, trip successfully booked
          content:
            application/json:
              schema:
              examples:
                bike:
                  value:
                    {
                        "isMatched": false
                    }
                keke:
                  value:
                    {
                      'isMatched': true
                    }

        422:
          description: Unprocessible entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomError"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /trips/{id}/cancel:
    post:
      security:
      - bearerAuth: []
      tags:
        - Trips
      summary: Cancels an already booked trip
      description: >
        Allows the rider to cancel a trip they had already booked
      operationId: cancelTrip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trip'
            example: 
              {
                "reason": "Just changed my mind"
              }
      responses:
        200:
          description: Ok, trip successfully canceled
          content:
            application/json:
              schema:
              example:
                { "trip_id": 2, "is_canceled": true, "success": true }
        422:
          description: Unprocessible entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomError"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /trips/{id}/accept:
    post:
      security:
      - bearerAuth: []
      tags:
        - Trips
      summary: Allow a driver to accept a trip
      description: >
        Allows a driver to accept a trip booked by a rider
      operationId: acceptTrip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trip'
            example: 
              {
                
              }
      responses:
        200:
          description: Ok, trip successfully canceled
          content:
            application/json:
              schema:
              example:
                { "trip_id": 2, "success": true }
        422:
          description: Unprocessible entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomError"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /trips/{id}/reject:
    post:
      security:
      - bearerAuth: []
      tags:
        - Trips
      summary: Allow a driver to reject a trip
      description: >
        Allows a driver to reject a trip booked by a rider
      operationId: rejectTrip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trip'
            example: 
              { }
      responses:
        200:
          description: Ok, trip successfully canceled
          content:
            application/json:
              schema:
              example:
                { "trip_id": 2, "is_rejected": true }
        422:
          description: Unprocessible entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomError"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /trips/{id}/start:
    post:
      security:
      - bearerAuth: []
      tags:
        - Trips
      summary: Allows a driver to indicate that a trip has started
      description: >
        This is endpoint should be called when a driver successfully picks up
        a rider
      operationId: startTrip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trip'
            example: 
              { }
      responses:
        200:
          description: Ok, trip successfully started
          content:
            application/json:
              schema:
              example:
                { "trip_id": 2, "success": true }
        422:
          description: Unprocessible entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomError"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /trips/{id}/complete:
    post:
      security:
      - bearerAuth: []
      tags:
        - Trips
      summary: Allows a driver to indicate that a trip has complete
      description: >
        This is endpoint should be called when a driver successfully drops
        a rider at their destination
      operationId: completeTrip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trip'
            example: 
              { }
      responses:
        200:
          description: Ok, trip successfully completed
          content:
            application/json:
              schema:
              example:
                { "trip_id": 2, "success": true }
        422:
          description: Unprocessible entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomError"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  #Users routes              
  # /users:
  #   get:
  #     tags:
  #       - Users
  #     summary: Gets list of users
  #     description: >
  #       Returns a paginated list of users
  #     operationId: getUsers
  #     parameters:
  #         - $ref: '#/components/parameters/limitParam'
  #         - $ref: '#/components/parameters/pageParam'
  #     responses:
  #       200:
  #         description: >
  #           This is the paginated list of users
  #         content:
  #           application/json:
  #             example:
  #               {
  #                 'meta':
  #                   {
  #                     'total': 2,
  #                     'per_page': 10,
  #                     'current_page': 1,
  #                     'last_page': 1,
  #                     'first_page': 1,
  #                     'first_page_url': '/?page=1',
  #                     'last_page_url': '/?page=1',
  #                     'next_page_url': null,
  #                     'previous_page_url': null,
  #                   },
  #                 'data':
  #                   [
  #                     {
  #                       'id': 1,
  #                       'email': 'user@gmail.com',
  #                       'phone_number': null,
  #                       'remember_me_token': null,
  #                       'created_at': '2020-11-07T04:57:45.129+01:00',
  #                       'updated_at': '2020-11-07T05:06:35.596+01:00',
  #                       'profile':
  #                         {
  #                           'id': 1,
  #                           'first_name': null,
  #                           'last_name': null,
  #                           'other_name': null,
  #                           'gender': null,
  #                           'disability': null,
  #                           'age': null,
  #                           'role': 'user',
  #                           'user_id': 1,
  #                           'state': null,
  #                           'lga': null,
  #                           'ward': null,
  #                           'polling_unit': null,
  #                           'created_at': '2020-11-07T05:06:35.656+01:00',
  #                           'updated_at': '2020-11-07T05:06:35.656+01:00',
  #                         },
  #                     }
  #                   ],
  #               }


  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  # /users/search:
  #   get:
  #     tags:
  #       - Users
  #     summary: Gets list of users matching searchParam
  #     description: >
  #       Returns a paginated list of users
  #     operationId: searchUsers
  #     parameters:
  #         - $ref: '#/components/parameters/limitParam'
  #         - $ref: '#/components/parameters/pageParam'
  #         - $ref: '#/components/parameters/searchTextParam'
  #     responses:
  #       200:
  #         description: >
  #           This is the paginated list of users
  #         content:
  #           application/json:
  #             example:
  #               {
  #                 'meta':
  #                   {
  #                     'total': 2,
  #                     'per_page': 10,
  #                     'current_page': 1,
  #                     'last_page': 1,
  #                     'first_page': 1,
  #                     'first_page_url': '/?page=1',
  #                     'last_page_url': '/?page=1',
  #                     'next_page_url': null,
  #                     'previous_page_url': null,
  #                   },
  #                 'data':
  #                   [
  #                     {
  #                       'id': 1,
  #                       'email': 'user@gmail.com',
  #                       'phone_number': null,
  #                       'remember_me_token': null,
  #                       'created_at': '2020-11-07T04:57:45.129+01:00',
  #                       'updated_at': '2020-11-07T05:06:35.596+01:00',
  #                       'profile':
  #                         {
  #                           'id': 1,
  #                           'first_name': null,
  #                           'last_name': null,
  #                           'other_name': null,
  #                           'gender': null,
  #                           'disability': null,
  #                           'age': null,
  #                           'role': 'user',
  #                           'user_id': 1,
  #                           'state': null,
  #                           'lga': null,
  #                           'ward': null,
  #                           'polling_unit': null,
  #                           'created_at': '2020-11-07T05:06:35.656+01:00',
  #                           'updated_at': '2020-11-07T05:06:35.656+01:00',
  #                         },
  #                     }
  #                   ],
  #               }
  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  # /users/{id}:
  #   parameters:
  #     - $ref: "#/components/parameters/idParam"
  #   get:
  #     tags:
  #       - Users
  #     summary: Gets a user
  #     description: >
  #       Returns a user based on their id.
  #     operationId: getUserById
  #     responses:
  #       200:
  #         description: A user matching the specified id
  #         content:
  #           application/json:
  #             schema:
  #               example:
  #                 {
  #                   'id': 1,
  #                   'email': 'user@gmail.com',
  #                   'phone_number': null,
  #                   'remember_me_token': null,
  #                   'created_at': '2020-11-07T04:57:45.129+01:00',
  #                   'updated_at': '2020-11-07T05:06:35.596+01:00',
  #                   'profile':
  #                     {
  #                       'id': 1,
  #                       'first_name': null,
  #                       'last_name': null,
  #                       'other_name': null,
  #                       'gender': null,
  #                       'disability': null,
  #                       'age': null,
  #                       'role': 'admin',
  #                       'user_id': 1,
  #                       'state': null,
  #                       'lga': null,
  #                       'ward': null,
  #                       'polling_unit': null,
  #                       'created_at': '2020-11-07T05:06:35.656+01:00',
  #                       'updated_at': '2020-11-07T05:06:35.656+01:00',
  #                       'photo':
  #                               {
  #                                 'id': 1,
  #                                 'url': 'https://ik.imagekit.io/trsuszcduc/dangiwa/users/cam3_XxM38k9-i.jpeg',
  #                                 'file_id': '5fa63b26dae0113f445f5998',
  #                                 'thumbnail_url': 'https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/dangiwa/users/cam3_XxM38k9-i.jpeg',
  #                                 'created_at': '2020-11-07T07:14:38.976+01:00',
  #                                 'updated_at': '2020-11-07T07:14:38.976+01:00',
  #                               }

  #                     },
  #                 }
  #       404:
  #         description: No users found matching the id parameter
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/CustomError"
  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  #   put:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Users
  #     summary: Updates a user profile information
  #     description: >
  #       Updates a user information based on their id. All fields of the request body are optional. This operation can only be carried out by the owner of the profile when they are logged in.
  #     operationId: updateUserById
  #     requestBody:
  #       content:
  #         multipart/form-data:
  #           schema:
  #            $ref: '#/components/schemas/UserProfile'
                  
  #     responses:
  #       200:
  #         description: Ok, user successfully updated
  #         content:
  #           application/json:
  #             schema:
  #             example:
  #               {
  #                 'id': 3,
  #                 'email': 'hankvogt@gmail.com',
  #                 'phone_number': '08093726483',
  #                 'created_at': '2020-11-07T07:02:17.684+01:00',
  #                 'updated_at': '2020-11-07T07:39:51.049+01:00',
  #                 'profile':
  #                   {
  #                     'id': 2,
  #                     'first_name': 'Hank',
  #                     'last_name': 'Vogt',
  #                     'other_name': 'Leroy',
  #                     'gender': 'male',
  #                     'disability': 'no',
  #                     'age': null,
  #                     'role': 'user',
  #                     'user_id': 3,
  #                     'state': 'Akansas',
  #                     'lga': 'oaky',
  #                     'ward': 'ward 3',
  #                     'polling_unit': 'oak',
  #                     'created_at': '2020-11-07T07:02:17.698+01:00',
  #                     'updated_at': '2020-11-07T07:41:39.305+01:00',
  #                     'photo':
  #                       {
  #                         'id': 1,
  #                         'url': 'https://ik.imagekit.io/trsuszcduc/dangiwa/users/cam3_XxM38k9-i.jpeg',
  #                         'file_id': '5fa63b26dae0113f445f5998',
  #                         'thumbnail_url': 'https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/dangiwa/users/cam3_XxM38k9-i.jpeg',
  #                         'created_at': '2020-11-07T07:14:38.976+01:00',
  #                         'updated_at': '2020-11-07T07:14:38.976+01:00',
  #                       },
  #                   },
  #               }

  #       404:
  #         description: User not found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/CustomError"

  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  #   delete:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Users
  #     summary: Deletes a user from the database
  #     description: >
  #       Deletes a customer, vendor, or agent from the database using their id. Only a user with admin privileges is authorized to perform this operation.
  #     operationId: deleteUserById
  #     responses:
  #       200:
  #         description: Ok, user successfully deleted
  #       404:
  #         description: User not found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  # /users/{id}/change-photo:
  #   parameters:
  #     - $ref: "#/components/parameters/idParam"
  #   put:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Users
  #     summary: Updates a user profile photo
  #     description: >
  #       Updates a user profile photo based on their id. 
  #     operationId: changeProfilePicture
  #     requestBody:
  #       content:
  #         multipart/form-data:
  #           schema:
  #             type: object
  #             properties:
  #               photo:
  #                 type: string
  #                 format: binary
  #     responses:
  #       200:
  #         description: Ok, user profile photo successfully updated
  #         content:
  #           application/json:
  #             schema:
  #             example:
  #               {
  #                 'id': 1,
  #                 'url': 'https://ik.imagekit.io/trsuszcduc/dangiwa/users/cam3_XxM38k9-i.jpeg',
  #                 'file_id': '5fa63b26dae0113f445f5998',
  #                 'thumbnail_url': 'https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/dangiwa/users/cam3_XxM38k9-i.jpeg',
  #                 'created_at': '2020-11-07T07:14:38.976+01:00',
  #                 'updated_at': '2020-11-07T07:14:38.976+01:00',
  #               }

  #       404:
  #         description: User not found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/CustomError'

  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'

  # /users/dangiwa:
  #   get:
  #     tags:
  #       - Users
  #     summary: Gets Dangiwa profile
  #     description: >
  #       It returns Dangiwa profile information
  #     operationId: dangiwaProfile
  #     responses:
  #       200:
  #         description: Dangiwa's profile information
  #         content:
  #           application/json:
  #             schema:
  #               example:
  #                 {
  #                   "id": 1,
  #                   "first_name": "John",
  #                   "last_name": "Doe",
  #                   "other_names": "Evans",
  #                   "title": "Engr",
  #                   "workplace": "Arise",
  #                   "position": "MD",
  #                   "role": "admin",
  #                   "user_id": 1,
  #                   "about": "_**Lorem **_ipsum _++dolor sit++_ amet consectetur adipisicing elit. Quisquam deserunt aspernatur repellat harum ut accusantium magni optio temporibus, corrupti id suscipit ipsum in, natus eius? **Ut totam magnam eum molestiae!**",
  #                   "about_us": "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Provident harum ratione architecto, voluptas dignissimos fuga cum quibusdam eos sequi ipsam eum! Error hic fugiat voluptatum odit, architecto laudantium maiores ab.\n\n_**Lorem ipsum dolor sit amet, consectetur **_adipisicing elit. Provident harum ratione architecto, voluptas dignissimos fuga cum quibusdam eos sequi ipsam eum! Error hic fugiat voluptatum odit, architecto laudantium maiores ab.\n\nLorem ipsum dolor sit amet,++** consectetur adipisicing**++ elit. Provident harum ratione architecto, voluptas dignissimos fuga cum quibusdam eos sequi ipsam eum! Error hic fugiat voluptatum odit, architecto laudantium maiores ab.",
  #                   "education": [
  #                       {
  #                           "school": "Springlight Primary School",
  #                           "qualifications": "First School Leaving Certificate",
  #                           "from": "1981",
  #                           "to": "1987"
  #                       }
  #                   ],
  #                   "mission": "_**Lorem **__\\_ipsum _++dolor sit++\\_ amet consectetur adipisicing elit. Quisquam deserunt aspernatur repellat harum ut accusantium magni optio temporibus, corrupti id suscipit ipsum in, natus eius? **Ut totam magnam eum molestiae!**",
  #                   "vision": "_**Lorem **__\\_ipsum _++dolor sit++\\_ amet consectetur adipisicing elit. Quisquam deserunt aspernatur repellat harum ut accusantium magni optio temporibus, corrupti id suscipit ipsum in, natus eius? **Ut totam magnam eum molestiae!**",
  #                   "created_at": "2020-11-15T10:25:12.458+01:00",
  #                   "updated_at": "2020-11-15T11:43:49.041+01:00"
  #                 }
  #       404:
  #         description: No profile found 
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  #News
  # /news:
  #   get:
  #     tags:
  #       - News
  #     summary: Paginated list of news
  #     description: >
  #       Returns a paginated list of news available, comments,and likes on the news
  #       and also the users who made the comments.
  #     operationId: listNews
  #     parameters:
  #       - $ref: "#/components/parameters/limitParam"
  #       - $ref: "#/components/parameters/pageParam"
  #     responses:
  #       200:
  #         description: Ok, successful request
  #         content:
  #           application/json:
  #             schema:
  #               example:
  #                 {
  #                   "meta": {
  #                       "total": 9,
  #                       "per_page": 10,
  #                       "current_page": 1,
  #                       "last_page": 1,
  #                       "first_page": 1,
  #                       "first_page_url": "/?page=1",
  #                       "last_page_url": "/?page=1",
  #                       "next_page_url": null,
  #                       "previous_page_url": null
  #                    },
  #                    "data":[
  #                       {
  #                         "id": 6,
  #                         "title": "This is new title",
  #                         "description": "Qui itaque fugiat odio quibusdam necessitatibus. Molestias debitis corrupti non et harum enim. Ut sunt pariatur eum consectetur.\n \rEt eum et quo facere. Ut repellendus perferendis quo temporibus aut provident. Voluptatem maxime facilis repudiandae quo asperiores. Facere quod corporis ducimus est dignissimos laboriosam. Doloremque ab eum unde rerum minima delectus nobis debitis quo. Impedit sit autem aut consequuntur a aperiam esse laborum.",
  #                         "category": "general",
  #                         "created_at": "2020-11-15T18:55:17.966+01:00",
  #                         "updated_at": "2020-11-15T23:41:30.785+01:00",
  #                         "is_visible": true,
  #                         "total_comments": 5,
  #                         "total_likes": 0,
  #                         "coverImage":{
  #                           "id": 12,
  #                           "url": "https://ik.imagekit.io/trsuszcduc/dangiwa/news/photos/cat6_RXSeK9Ma5.jpg",
  #                           "file_id": "5fb1aeb232c9df1ac9c77bc1",
  #                           "thumbnail_url": "https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/dangiwa/news/photos/cat6_RXSeK9Ma5.jpg",
  #                           "is_gallery": false,
  #                           "title": null,
  #                           "description": null,
  #                           "profile_id": null,
  #                           "project_id": null,
  #                           "news_id": 6,
  #                           "created_at": "2020-11-15T23:41:30.796+01:00",
  #                           "updated_at": "2020-11-15T23:41:30.796+01:00"
  #                         },
  #                         "likes": [],
  #                         "comments":[
  #                           {
  #                             "id": 21,
  #                             "comment": "Soluta nisi odio dolorum earum commodi itaque quos ut. Voluptatibus exercitationem laudantium adipisci dolores. Quos possimus et fuga aut ipsam odio qui. Est aut earum reiciendis est.",
  #                             "user_id": 23,
  #                             "project_id": null,
  #                             "news_id": 6,
  #                             "created_at": "2020-11-15T18:55:18.050+01:00",
  #                             "updated_at": "2020-11-15T18:55:18.050+01:00",
  #                             'commentor':
  #                                   {
  #                                     'id': 23,
  #                                     'email': 'Roslyn_Hahn@gmail.com',
  #                                     'phone_number': '956.689.7083 x45382',
  #                                     'created_at': '2020-11-15T18:55:18.002+01:00',
  #                                     'updated_at': '2020-11-15T18:55:18.003+01:00',
  #                                   }
  #                           }
  #                         ]
  #                       }
  #                    ]
  #                 }

  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  # /news/search:
  #   get:
  #     tags:
  #       - News
  #     summary: Paginated list of news matching search param
  #     description: >
  #       Returns a paginated list of news available, comments,and likes on the news
  #       and also the users who made the comments.
  #     operationId: searchNews
  #     parameters:
  #       - $ref: "#/components/parameters/limitParam"
  #       - $ref: "#/components/parameters/pageParam"
  #       - $ref: "#/components/parameters/searchTextParam"
  #     responses:
  #       200:
  #         description: Ok, successful request
  #         content:
  #           application/json:
  #             schema:
  #               example:
  #                 {
  #                   "meta": {
  #                       "total": 9,
  #                       "per_page": 10,
  #                       "current_page": 1,
  #                       "last_page": 1,
  #                       "first_page": 1,
  #                       "first_page_url": "/?page=1",
  #                       "last_page_url": "/?page=1",
  #                       "next_page_url": null,
  #                       "previous_page_url": null
  #                    },
  #                    "data":[
  #                       {
  #                         "id": 6,
  #                         "title": "This is new title",
  #                         "description": "Qui itaque fugiat odio quibusdam necessitatibus. Molestias debitis corrupti non et harum enim. Ut sunt pariatur eum consectetur.\n \rEt eum et quo facere. Ut repellendus perferendis quo temporibus aut provident. Voluptatem maxime facilis repudiandae quo asperiores. Facere quod corporis ducimus est dignissimos laboriosam. Doloremque ab eum unde rerum minima delectus nobis debitis quo. Impedit sit autem aut consequuntur a aperiam esse laborum.",
  #                         "category": "general",
  #                         "created_at": "2020-11-15T18:55:17.966+01:00",
  #                         "updated_at": "2020-11-15T23:41:30.785+01:00",
  #                         "is_visible": true,
  #                         "total_comments": 5,
  #                         "total_likes": 0,
  #                         "coverImage":{
  #                           "id": 12,
  #                           "url": "https://ik.imagekit.io/trsuszcduc/dangiwa/news/photos/cat6_RXSeK9Ma5.jpg",
  #                           "file_id": "5fb1aeb232c9df1ac9c77bc1",
  #                           "thumbnail_url": "https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/dangiwa/news/photos/cat6_RXSeK9Ma5.jpg",
  #                           "is_gallery": false,
  #                           "title": null,
  #                           "description": null,
  #                           "profile_id": null,
  #                           "project_id": null,
  #                           "news_id": 6,
  #                           "created_at": "2020-11-15T23:41:30.796+01:00",
  #                           "updated_at": "2020-11-15T23:41:30.796+01:00"
  #                         },
  #                         "likes": [],
  #                         "comments":[
  #                           {
  #                             "id": 21,
  #                             "comment": "Soluta nisi odio dolorum earum commodi itaque quos ut. Voluptatibus exercitationem laudantium adipisci dolores. Quos possimus et fuga aut ipsam odio qui. Est aut earum reiciendis est.",
  #                             "user_id": 23,
  #                             "project_id": null,
  #                             "news_id": 6,
  #                             "created_at": "2020-11-15T18:55:18.050+01:00",
  #                             "updated_at": "2020-11-15T18:55:18.050+01:00",
  #                             'commentor':
  #                                   {
  #                                     'id': 23,
  #                                     'email': 'Roslyn_Hahn@gmail.com',
  #                                     'phone_number': '956.689.7083 x45382',
  #                                     'created_at': '2020-11-15T18:55:18.002+01:00',
  #                                     'updated_at': '2020-11-15T18:55:18.003+01:00',
  #                                   }
  #                           }
  #                         ]
  #                       }
  #                    ]
  #                 }

  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  # /news/{id}:
  #   parameters:
  #     - $ref: "#/components/parameters/idParam"
  #   get:
  #     tags:
  #       - News
  #     summary: Gets news by its id
  #     description: >
  #       Returns news, its comments, likes and users who liked and commented on it. 
  #       A call to this endpoint isn't entirely necessary because the same data are
  #       returned from this **/news** endpoint.
  #     operationId: newsById
  #     responses:
  #       200:
  #         description: >
  #           Ok, successful. 
  #         content:
  #           application/json:
  #             schema:
  #              example:
  #               {
  #                 'id': 6,
  #                 'title': 'This is new title',
  #                 'description': "Qui itaque fugiat odio quibusdam necessitatibus. Molestias debitis corrupti non et harum enim. Ut sunt pariatur eum consectetur.\n \rEt eum et quo facere. Ut repellendus perferendis quo temporibus aut provident. Voluptatem maxime facilis repudiandae quo asperiores. Facere quod corporis ducimus est dignissimos laboriosam. Doloremque ab eum unde rerum minima delectus nobis debitis quo. Impedit sit autem aut consequuntur a aperiam esse laborum.",
  #                 'category': 'general',
  #                 'created_at': '2020-11-15T18:55:17.966+01:00',
  #                 'updated_at': '2020-11-15T23:41:30.785+01:00',
  #                 'is_visible': true,
  #                 'total_comments': 5,
  #                 'total_likes': 0,
  #                 'coverImage':
  #                   {
  #                     'id': 12,
  #                     'url': 'https://ik.imagekit.io/trsuszcduc/dangiwa/news/photos/cat6_RXSeK9Ma5.jpg',
  #                     'file_id': '5fb1aeb232c9df1ac9c77bc1',
  #                     'thumbnail_url': 'https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/dangiwa/news/photos/cat6_RXSeK9Ma5.jpg',
  #                     'is_gallery': false,
  #                     'title': null,
  #                     'description': null,
  #                     'profile_id': null,
  #                     'project_id': null,
  #                     'news_id': 6,
  #                     'created_at': '2020-11-15T23:41:30.796+01:00',
  #                     'updated_at': '2020-11-15T23:41:30.796+01:00',
  #                   },
  #                 'likes': [],
  #                 'comments':
  #                   [
  #                     {
  #                       'id': 21,
  #                       'comment': 'Soluta nisi odio dolorum earum commodi itaque quos ut. Voluptatibus exercitationem laudantium adipisci dolores. Quos possimus et fuga aut ipsam odio qui. Est aut earum reiciendis est.',
  #                       'user_id': 23,
  #                       'project_id': null,
  #                       'news_id': 6,
  #                       'created_at': '2020-11-15T18:55:18.050+01:00',
  #                       'updated_at': '2020-11-15T18:55:18.050+01:00',
  #                       'commentor':
  #                         {
  #                           'id': 23,
  #                           'email': 'Roslyn_Hahn@gmail.com',
  #                           'phone_number': '956.689.7083 x45382',
  #                           'created_at': '2020-11-15T18:55:18.002+01:00',
  #                           'updated_at': '2020-11-15T18:55:18.003+01:00',
  #                         },
  #                     },
  #                   ],
  #               }
  #       404:
  #         description: No users found matching the id parameter
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

 
  # Pictures routes
  # /images:
  #   get:
  #     tags:
  #       - Gallery
  #     summary: Gets list of paginated pictures in the gallery
  #     description: >
  #       Returns the list of pictures in the gallery
  #     operationId: listPictures
  #     parameters:
  #       - $ref: "#/components/parameters/limitParam"
  #       - $ref: "#/components/parameters/pageParam"
  #     responses:
  #       200:
  #         description: Ok, successful request
  #         content:
  #           application/json:
  #             schema:
  #               example:
  #                 {
  #                   "meta": {
  #                   "total": 9,
  #                   "per_page": 10,
  #                   "current_page": 1,
  #                   "last_page": 1,
  #                   "first_page": 1,
  #                   "first_page_url": "/?page=1",
  #                   "last_page_url": "/?page=1",
  #                   "next_page_url": null,
  #                   "previous_page_url": null
  #                  },
  #                  "data":[
  #                    {
  #                     "id": 21,
  #                     "url": "https://ik.imagekit.io/trsuszcduc/dangiwa/gallery/photos/dog3_qVnDyXHXP.jpg",
  #                     "file_id": "5fb2512c32c9df1ac9cc2442",
  #                     "thumbnail_url": "https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/dangiwa/gallery/photos/dog3_qVnDyXHXP.jpg",
  #                     "is_gallery": true,
  #                     "title": "Cats",
  #                     "description": "Two happy buddies",
  #                     "profile_id": null,
  #                     "project_id": null,
  #                     "news_id": null,
  #                     "created_at": "2020-11-16T11:14:44.786+01:00",
  #                     "updated_at": "2020-11-16T12:04:54.783+01:00"
  #                   },
  #                  ]
  #                 }

  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  # /videos:
  #   get:
  #     tags:
  #        - Gallery
  #     summary: Gets list of paginated videos in the gallery
  #     description: >
  #       Returns the list of pictures in the gallery
  #     operationId: listVideos
  #     parameters:
  #       - $ref: '#/components/parameters/limitParam'
  #       - $ref: '#/components/parameters/pageParam'
  #     responses:
  #         200:
  #           description: Ok, successful request
  #           content:
  #             application/json:
  #               schema:
  #                 example:
  #                   {
  #                     'meta':
  #                       {
  #                         'total': 9,
  #                         'per_page': 10,
  #                         'current_page': 1,
  #                         'last_page': 1,
  #                         'first_page': 1,
  #                         'first_page_url': '/?page=1',
  #                         'last_page_url': '/?page=1',
  #                         'next_page_url': null,
  #                         'previous_page_url': null,
  #                       },
  #                     'data':
  #                       [
  #                         {
  #                           'id': 2,
  #                           'youtube_url': null,
  #                           'vimeo_video_id': '480203411',
  #                           'vimeo_uri': '/videos/480203411',
  #                           'is_vimeo': true,
  #                           'is_youtube': null,
  #                           'title': 'Reactjs Intro',
  #                           'description': 'Reactjs intro description',
  #                           'created_at': '2020-11-17T09:13:28.048+01:00',
  #                           'updated_at': '2020-11-17T09:13:28.048+01:00',
  #                         }

  #                       ],
  #                   }

  #         500:
  #           description: Internal Server Error
  #           content:
  #             application/json:
  #               schema:
  #                 $ref: '#/components/schemas/Error'

  # # Image routes
  # /images1:
  #   get:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Images
  #     summary: Gets list images
  #     description: >
  #       Returns the list of all image owned by a business/chef.
  #     operationId: listImages
  #     responses:
  #       200:
  #         description: Ok, successful request
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/Image"
  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  #   post:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Images
  #     summary: Adds new image
  #     description: >
  #       Adds new image to the database
  #     operationId: addImage
  #     requestBody:
  #       content:
  #         multipart/form-data:
  #           schema:
  #             type: object
  #             properties:
  #               businessId:
  #                 type: integer
  #               image:
  #                 type: string
  #                 format: binary
  #     responses:
  #       200:
  #         description: Ok, successful
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Image"
  #             example:
  #               id: 2
  #               url: "image.png"
  #               thumbnailUrl: "thumbnail.png"
  #               fileId: "47474839ddde8e8e"
  #               businessId: 5
  #               foodId: null
  #               serviceId: null

  #       422:
  #         description: Unprocessible entity
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  # /images/{id}:
  #   parameters:
  #     - $ref: "#/components/parameters/idParam"
  #   get:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Images
  #     summary: Gets an image by its id
  #     description: >
  #       Returns an image from the database.
  #     operationId: imageById
  #     responses:
  #       200:
  #         description: >
  #           Ok, successful.
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Image"

  #       404:
  #         description: >
  #           No image found matching the id parameter
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  #   delete:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Images
  #     summary: Deletes an image
  #     description: >
  #       Deletes an image from the database using their id
  #     operationId: deleteImageById
  #     responses:
  #       200:
  #         description: Ok, image was successfully deleted
  #       404:
  #         description: Image not found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  #   # Review routes

 
  # # Token routes
  # /tokens:
  #   post:
  #     tags:
  #       - Tokens
  #     summary: Adds new user token
  #     description: >
  #       Registers a user's device token for notifications
  #     operationId: addToken
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/Token"
  #     responses:
  #       200:
  #         description: Ok, successful request
  #         content:
  #           application/json:
  #             schema:
  #               allOf:
  #                 - type: object
  #                   properties:
  #                     id:
  #                       type: integer
  #                 - $ref: "#/components/schemas/Token"
  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  # /tokens/{id}:
  #   parameters:
  #     - $ref: "#/components/parameters/idParam"
  #   put:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Tokens
  #     summary: Updates a token
  #     description: >
  #       Updates a token
  #     operationId: updateTokenById
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             required:
  #               - userId
  #             properties:
  #               userId:
  #                 type: integer
  #               role:
  #                 type: string
  #                 enum: ["customer", "vendor", "admin", "agent"]
  #               businessId:
  #                 type: integer
  #           examples:
  #             customer:
  #               value:
  #                 userId: 2
  #                 role: "customer"
  #             vendor:
  #               value:
  #                 userId: 3
  #                 role: "vendor"
  #                 businessId: 1
  #             agent:
  #               value:
  #                 userId: 4
  #                 role: "agent"
  #     responses:
  #       200:
  #         description: Ok, order successfully updated
  #       404:
  #         description: Order not found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

  schemas:
    User:
      type: object
      description: A user who can either be a vendor,customer, an agent or admin
      required:
        - email
      properties:
        id:
          description: A readonly property
          type: integer
          format: int32
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        address:
          type: string
        phone:
          type: string
        role:
          type: string
          enum: ["admin", "vendor", "agent", "customer"]
          default: "customer"
        user_name:
          description: readonly property
          type: string
    Image:
      type: object
      description: Represents an image of a dish or food item
      properties:
        id:
          description: readonly property
          type: integer
          format: int32
        url:
          type: string
        thumbnailUrl:
          type: string
        fileId:
          description: readonly property
          type: string
        businessId:
          description: The id of the business entity this image belongs to
          type: integer
          format: int32
        foodId:
          description: The id of the food item or dish this image could belong to
          type: integer
          format: int32
        serviceId:
          description: The id of the service (which involves preparing dishes) this image could belong to
          type: integer
          format: int32
    Order:
      type: object
      description: Represents an order from a customer
      properties:
        id:
          description: readonly property
          type: integer
          format: int32
        totalCharges:
          type: number
          format: float32
        qty:
          description: Quantity of dishes/food items ordered
          type: integer
          format: int32
        status:
          description: The status of the order
          type: string
          enum: ["pending", "completed", "canceled"]
          default: "pending"
        fulfilledAt:
          description: The time the ordered was fulfilled or completed
          type: string
    PaymentInfo:
      type: object
      description: >
        Summarized payment information collected for ordered products
      properties:
        status:
          type: string
        amount:
          type: number
          format: float32
        order_id:
          type: integer
        payment_method:
          type: string
        user_id:
          type: integer
        transaction_id:
          type: string
        transaction_ref:
          type: string
        flutter_ref:
          type: string
    Token:
      type: object
      required:
        - token
        - role
      properties:
        token:
          type: string
        role:
          type: string
          enum: ["anonymous", "vendor", "agent", "admin", "customer"]
    Error:
      type: object
      description: Represents error
      properties:
        message:
          description: Reason for the error
          type: string
    Orders:
      type: array
      items:
        allOf:
          - $ref: "#/components/schemas/Order"
          - type: object
            properties:
              ordered_foods:
                type: array
                items:
                  $ref: "#/components/schemas/Food"
              ordered_services:
                type: array
                items:
                  $ref: "#/components/schemas/Service"
    OrderedItem:
      type: object
      required:
        - items
        - customerId
        - delivery
      properties:
        items:
          type: array
          items:
            type: object
            required:
              - id
              - price
              - qty
              - businessId
            properties:
              id:
                description: The id of the ordered product
                type: integer

              price:
                description: The selling price of the product
                type: number
                format: float32
              qty:
                description: >
                  The quantity of the product the customer added to cart
                type: integer
              businessId:
                type: integer
        customerId:
          type: integer
        delivery:
          type: string
          enum: ["pickup", "home_delivery"]
    PageInfo:
      type: object
      description: The meta data of a paginated result from the database
      properties:
        hasNext:
          type: boolean
          default: false
        nextCursor:
          type: string
    RiderProfile:
      type: object
      properties:
        email:
          type: string
        phoneNumber:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        address:
          type: string
        bvn:
          type: string
        profilePicture:
          type: string
          format: binary
          
    DriverProfile:
      type: object
      properties:
        email:
          type: string
        phoneNumber:
          type: string
        fullName:
          type: string
        bvn:
          type: string
          
    DriverAddress:
      type: object
      properties:
        state:
          type: string
        lga:
          type: string
        homeAddress:
          type: string
    DriverVehicle:
      type: object
      properties:
        vehicleType:
          type: string
        modelNumber:
          type: string
        plateNumber:
          type: string
        color:
          type: string
    Toggle:
      type: object
      required:
        - latitude
        - longitude
      properties:
        address:
          type: string
        latitude:
          type: number
        longitude:
          type: number

    DriverDocuments:
      type: object
      properties:
        birthCertificate.photo:
              type: string
              format: binary
        profilePicture.photo:
              type: string
              format: binary
        driverLicense.photo:
              type: string
              format: binary
        utilityBill.photo:
              type: string
              format: binary
        nationalID.photo:
              type: string
              format: binary

    UserProfile:
      type: object
      properties:
        email:
          type: string
        phoneNumber:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        address:
          type: string
        bvn:
          type: string
        age:
          type: integer
        disability:
          type: string
        state:
          type: string
        lga:
          type: string
        ward:
         type: string
        photo:
          type: string
          format: binary
          
    Trip:
      type: object
      properties:
        distance:
          type: integer
          format: float32
        price:
          type: integer
          format: float32
        fromAddress:
          type: string
        toAddress:
          type: string
        geolocation.fromLocation.latitude:
          type: integer
          format: float32
        geolocation.fromLocation.longitude:
          type: integer
          format: float32
        geolocation.toLocation.latitude:
          type: integer
          format: float32
        geolocation.toLocation.longitude:
          type: integer
          format: float32
        vehicleSpecs.vehicleType:
          type: string
          enum: ['keke','bike']
        vehicleSpecs.isCharter:
          type: boolean
          description: required if vehicleType field is **keke**
        vehicleSpecs.isCarriage:
          type: boolean
          description: required if vehicleType field is **keke**
        vehicleSpecs.numberOfSeats:
          type: integer
          description: required if isCharter field is **false**
        vehicleSpecs.luggagePictures:
          type: array
          description: required if isCarriage field is **true**
          items:
            type: string
            format: binary
          maxLength: 4
          minLength: 1
          

    CustomError:
      type: object
      description: Represents error
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                description: Reason for the error
                type: string


  examples:
    Email:
      value:
        - email: 'example@gmail.com'
          password: 'example'

  parameters:
    searchParam:
      name: searchTerm
      in: query
      description: Search term
      schema:
        type: string
    limitParam:
      name: limit
      in: query
      description: Total number of items to return
      schema:
        type: integer
        format: int32
    verifiedParam:
      name: verified
      in: query
      description: >
        Determines whether to return verified or unverified businesses. A combination
        of both is returned by default.
      schema:
        type: boolean
    suspendedParam:
      name: suspended
      in: query
      description: >
        Determines whether to return a list of businesses under suspension or those that are
        not suspended. A combination of both is returned by default.
      schema:
        type: boolean
    pageParam:
      name: page
      in: query
      description: The page number to return
      schema:
        type: integer
    searchTextParam:
      name: searchTerm
      in: query
      description: The title/description(for news) or firstname/lastname (for users) to search for
      schema:
        type: string
    hasNextParam:
      name: hasNext
      in: query
      description: A boolean to determine whether there are still more items to return
      schema:
        type: boolean
    relationsParam:
      name: relations
      in: query
      description: >
        A list showing all the relationships of an object a consumer wants
        to be returned. 'foods' and 'services' params are mutually exclusive
      schema:
        type: string
        example: "orders,services,foods,reviews,ingredients"
    foodRelations:
      name: relations
      in: query
      description: >
        A list showing all the relationships of an object a consumer wants
        to be returned.
      schema:
        type: string
        example: "reviews,category,business,owner,reviewer"
    serviceRelations:
      name: relations
      in: query
      description: >
        A list showing all the relationships of an object a consumer wants
        to be returned.
      schema:
        type: string
        example: "reviews,ingredients,business,owner,reviewer"
    reviewRelations:
      name: relations
      in: query
      description: >
        A list showing all the relationships of an object a consumer wants
        to be returned.
      schema:
        type: string
        example: "reviewed_food,reviewed_service,reviewer"
    roleParam:
      name: role
      in: query
      description: user role
      schema:
        type: string
        enum: ["customer", "vendor", "agent"]
        default: "customer"
    idParam:
      name: id
      in: path
      required: true
      description: The item id
      schema:
        type: integer
        format: int32
