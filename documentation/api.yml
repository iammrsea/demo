openapi: 3.0.3
info:
  title: Dangiwa API Documentation
  description: This is the API documentation for Dangiwa App
  contact:
    - name: API Support
    - email: andrew.ekwugha@lumilab.ng or ekwughaandrew@gmail.com
  version: 1.0.0
servers:
  - url: /api/v1

tags:
  - name: Specification
    description: The Swagger API Specification (version 3.0.3)
  - name: General Information
    description: >
      - 1) **Variable Naming:**
        i) All request bodies of the endpoints, but 'POST /payment', are camelCased e.g firstName, lastName etc
        ii) All response bodies are snake_cased e.g first_name, last_name etc.
      - 2) **Lock Icon:** The lock icon indicates protected routes/endpoints. In order to make an authenticated
          request, click the **Authorize** button or the lock icon and enter/paste your token. The token
          is returned as part of the payload after a successful login.
      - 3) **Authorization:** In order to ensure predictable response payloads from the endpoints,
          you are advised to make all API requests with users' tokens when they are logged in. This
          is to enable the app to carry out silent authentication and return tailored results based
          on the user's role. For instance, vendor A shouldn't be able to see food listings of vendor B if
          they are logged in to the app as vendor A, and vice versa.

paths:
  #Authentication routes
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: Logins in user with their email/phone number and password
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
               login with email:
                  value:
                    email: 'example@gmail.com'
                    password: 'example'
               login with phone number:
                  value:
                    phoneNumber: '08056362539'
                    password: 'example'
      responses:
        200:
          description: Ok, user successfully logged in
          content:
            application/json:
              schema:
              example:
                  {
                    'user_id': 2,
                    'token': 'Mg.8hBq8wzx4kBNAgH3QfWUJ_hmPYnOKKD',
                    'id': 2,
                    'email': 'johndoe@gmail.com',
                    'phone_number': null,
                    "role": 'admin',
                    'created_at': '2020-11-07T05:06:35.694+01:00',
                    'updated_at': '2020-11-07T05:06:35.694+01:00',
                  }


        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/register:
    post:
      tags:
        - Authentication
      summary: User Registration/Sign up
      description: Registers or signs up a new user with their email, phone number and password
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              phoneNumber: 080835274833
              password: "johndoe"
              isDriver: true
      responses:
        200:
          description: Ok, user successfully registered
          content:
            application/json:
              schema:
              
              examples:
                driver:
                  value:
                    {
                      'user_id': 3,
                      'token': 'NQ.V-t24aSaY-Qa-yOuomlGFYTL0WOkEoKN6tXJnx9F8xOjpNG4FaMgmQe4gZxg',
                      'phone_number': '080835274833',
                      'role': 'driver',
                      'created_at': '2020-11-22T12:29:52.091+01:00',
                      'updated_at': '2020-11-22T12:29:52.096+01:00',
                      'id': 3,
                      'driver':
                        {
                          'id': 1,
                          'first_name': null,
                          'last_name': null,
                          'full_name': null,
                          'bvn': null,
                          'user_id': 3,
                          'created_at': '2020-11-22T12:29:52.170+01:00',
                          'updated_at': '2020-11-22T12:29:52.170+01:00',
                        },
                    }
                rider:
                  value:
                    {
                      "user_id": 4,
                      "token": "Ng.MJt1FQwBYjEeAE8vUHWqDA0QKX5mFaHBXao6yXKNjoYzyE9lypOuCe9zRvyP",
                      "phone_number": "08083927161",
                      "role": "rider",
                      "created_at": "2020-11-22T12:36:06.935+01:00",
                      "updated_at": "2020-11-22T12:36:06.940+01:00",
                      "id": 4,
                      "rider": {
                        "id": 1,
                        "first_name": null,
                        "last_name": null,
                        "address": null,
                        "bvn": null,
                        "user_id": 4,
                        "created_at": "2020-11-22T12:36:07.006+01:00",
                        "updated_at": "2020-11-22T12:36:07.006+01:00"
                      }
                    }

        422:
          description: Unprocessible entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomError"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/logout:
    delete:
      tags:
        - Authentication
      summary: Logs out user
      description: >
        Logs out an authenticated user by deleting their token
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        200:
          description: Ok, user successfully logged out.
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # User related routes
  /users:
    get:
      tags:
        - Users
      summary: Gets list of users
      description: >
        Returns a paginated list of users
      operationId: getUsers
      parameters:
          - $ref: '#/components/parameters/limitParam'
          - $ref: '#/components/parameters/pageParam'
      responses:
        200:
          description: >
            This is the paginated list of users
          content:
            application/json:
              example:
                {
                  'meta':
                    {
                      'total': 2,
                      'per_page': 10,
                      'current_page': 1,
                      'last_page': 1,
                      'first_page': 1,
                      'first_page_url': '/?page=1',
                      'last_page_url': '/?page=1',
                      'next_page_url': null,
                      'previous_page_url': null,
                    },
                  'data':
                    [
                      {
                        'id': 1,
                        'email': 'user@gmail.com',
                        'phone_number': null,
                        'remember_me_token': null,
                        'created_at': '2020-11-07T04:57:45.129+01:00',
                        'updated_at': '2020-11-07T05:06:35.596+01:00',
                        'profile':
                          {
                            'id': 1,
                            'first_name': null,
                            'last_name': null,
                            'other_name': null,
                            'gender': null,
                            'disability': null,
                            'age': null,
                            'role': 'user',
                            'user_id': 1,
                            'state': null,
                            'lga': null,
                            'ward': null,
                            'polling_unit': null,
                            'created_at': '2020-11-07T05:06:35.656+01:00',
                            'updated_at': '2020-11-07T05:06:35.656+01:00',
                          },
                      }
                    ],
                }


        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/search:
    get:
      tags:
        - Users
      summary: Gets list of users matching searchParam
      description: >
        Returns a paginated list of users
      operationId: searchUsers
      parameters:
          - $ref: '#/components/parameters/limitParam'
          - $ref: '#/components/parameters/pageParam'
          - $ref: '#/components/parameters/searchTextParam'
      responses:
        200:
          description: >
            This is the paginated list of users
          content:
            application/json:
              example:
                {
                  'meta':
                    {
                      'total': 2,
                      'per_page': 10,
                      'current_page': 1,
                      'last_page': 1,
                      'first_page': 1,
                      'first_page_url': '/?page=1',
                      'last_page_url': '/?page=1',
                      'next_page_url': null,
                      'previous_page_url': null,
                    },
                  'data':
                    [
                      {
                        'id': 1,
                        'email': 'user@gmail.com',
                        'phone_number': null,
                        'remember_me_token': null,
                        'created_at': '2020-11-07T04:57:45.129+01:00',
                        'updated_at': '2020-11-07T05:06:35.596+01:00',
                        'profile':
                          {
                            'id': 1,
                            'first_name': null,
                            'last_name': null,
                            'other_name': null,
                            'gender': null,
                            'disability': null,
                            'age': null,
                            'role': 'user',
                            'user_id': 1,
                            'state': null,
                            'lga': null,
                            'ward': null,
                            'polling_unit': null,
                            'created_at': '2020-11-07T05:06:35.656+01:00',
                            'updated_at': '2020-11-07T05:06:35.656+01:00',
                          },
                      }
                    ],
                }
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{id}:
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      tags:
        - Users
      summary: Gets a user
      description: >
        Returns a user based on their id.
      operationId: getUserById
      responses:
        200:
          description: A user matching the specified id
          content:
            application/json:
              schema:
                example:
                  {
                    'id': 1,
                    'email': 'user@gmail.com',
                    'phone_number': null,
                    'remember_me_token': null,
                    'created_at': '2020-11-07T04:57:45.129+01:00',
                    'updated_at': '2020-11-07T05:06:35.596+01:00',
                    'profile':
                      {
                        'id': 1,
                        'first_name': null,
                        'last_name': null,
                        'other_name': null,
                        'gender': null,
                        'disability': null,
                        'age': null,
                        'role': 'admin',
                        'user_id': 1,
                        'state': null,
                        'lga': null,
                        'ward': null,
                        'polling_unit': null,
                        'created_at': '2020-11-07T05:06:35.656+01:00',
                        'updated_at': '2020-11-07T05:06:35.656+01:00',
                        'photo':
                                {
                                  'id': 1,
                                  'url': 'https://ik.imagekit.io/trsuszcduc/dangiwa/users/cam3_XxM38k9-i.jpeg',
                                  'file_id': '5fa63b26dae0113f445f5998',
                                  'thumbnail_url': 'https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/dangiwa/users/cam3_XxM38k9-i.jpeg',
                                  'created_at': '2020-11-07T07:14:38.976+01:00',
                                  'updated_at': '2020-11-07T07:14:38.976+01:00',
                                }

                      },
                  }
        404:
          description: No users found matching the id parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomError"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Updates a user profile information
      description: >
        Updates a user information based on their id. All fields of the request body are optional. This operation can only be carried out by the owner of the profile when they are logged in.
      operationId: updateUserById
      requestBody:
        content:
          multipart/form-data:
            schema:
             $ref: '#/components/schemas/UserProfile'
                  
      responses:
        200:
          description: Ok, user successfully updated
          content:
            application/json:
              schema:
              example:
                {
                  'id': 3,
                  'email': 'hankvogt@gmail.com',
                  'phone_number': '08093726483',
                  'created_at': '2020-11-07T07:02:17.684+01:00',
                  'updated_at': '2020-11-07T07:39:51.049+01:00',
                  'profile':
                    {
                      'id': 2,
                      'first_name': 'Hank',
                      'last_name': 'Vogt',
                      'other_name': 'Leroy',
                      'gender': 'male',
                      'disability': 'no',
                      'age': null,
                      'role': 'user',
                      'user_id': 3,
                      'state': 'Akansas',
                      'lga': 'oaky',
                      'ward': 'ward 3',
                      'polling_unit': 'oak',
                      'created_at': '2020-11-07T07:02:17.698+01:00',
                      'updated_at': '2020-11-07T07:41:39.305+01:00',
                      'photo':
                        {
                          'id': 1,
                          'url': 'https://ik.imagekit.io/trsuszcduc/dangiwa/users/cam3_XxM38k9-i.jpeg',
                          'file_id': '5fa63b26dae0113f445f5998',
                          'thumbnail_url': 'https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/dangiwa/users/cam3_XxM38k9-i.jpeg',
                          'created_at': '2020-11-07T07:14:38.976+01:00',
                          'updated_at': '2020-11-07T07:14:38.976+01:00',
                        },
                    },
                }

        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomError"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Deletes a user from the database
      description: >
        Deletes a customer, vendor, or agent from the database using their id. Only a user with admin privileges is authorized to perform this operation.
      operationId: deleteUserById
      responses:
        200:
          description: Ok, user successfully deleted
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{id}/change-photo:
    parameters:
      - $ref: "#/components/parameters/idParam"
    put:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Updates a user profile photo
      description: >
        Updates a user profile photo based on their id. 
      operationId: changeProfilePicture
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        200:
          description: Ok, user profile photo successfully updated
          content:
            application/json:
              schema:
              example:
                {
                  'id': 1,
                  'url': 'https://ik.imagekit.io/trsuszcduc/dangiwa/users/cam3_XxM38k9-i.jpeg',
                  'file_id': '5fa63b26dae0113f445f5998',
                  'thumbnail_url': 'https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/dangiwa/users/cam3_XxM38k9-i.jpeg',
                  'created_at': '2020-11-07T07:14:38.976+01:00',
                  'updated_at': '2020-11-07T07:14:38.976+01:00',
                }

        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/dangiwa:
    get:
      tags:
        - Users
      summary: Gets Dangiwa profile
      description: >
        It returns Dangiwa profile information
      operationId: dangiwaProfile
      responses:
        200:
          description: Dangiwa's profile information
          content:
            application/json:
              schema:
                example:
                  {
                    "id": 1,
                    "first_name": "John",
                    "last_name": "Doe",
                    "other_names": "Evans",
                    "title": "Engr",
                    "workplace": "Arise",
                    "position": "MD",
                    "role": "admin",
                    "user_id": 1,
                    "about": "_**Lorem **_ipsum _++dolor sit++_ amet consectetur adipisicing elit. Quisquam deserunt aspernatur repellat harum ut accusantium magni optio temporibus, corrupti id suscipit ipsum in, natus eius? **Ut totam magnam eum molestiae!**",
                    "about_us": "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Provident harum ratione architecto, voluptas dignissimos fuga cum quibusdam eos sequi ipsam eum! Error hic fugiat voluptatum odit, architecto laudantium maiores ab.\n\n_**Lorem ipsum dolor sit amet, consectetur **_adipisicing elit. Provident harum ratione architecto, voluptas dignissimos fuga cum quibusdam eos sequi ipsam eum! Error hic fugiat voluptatum odit, architecto laudantium maiores ab.\n\nLorem ipsum dolor sit amet,++** consectetur adipisicing**++ elit. Provident harum ratione architecto, voluptas dignissimos fuga cum quibusdam eos sequi ipsam eum! Error hic fugiat voluptatum odit, architecto laudantium maiores ab.",
                    "education": [
                        {
                            "school": "Springlight Primary School",
                            "qualifications": "First School Leaving Certificate",
                            "from": "1981",
                            "to": "1987"
                        }
                    ],
                    "mission": "_**Lorem **__\\_ipsum _++dolor sit++\\_ amet consectetur adipisicing elit. Quisquam deserunt aspernatur repellat harum ut accusantium magni optio temporibus, corrupti id suscipit ipsum in, natus eius? **Ut totam magnam eum molestiae!**",
                    "vision": "_**Lorem **__\\_ipsum _++dolor sit++\\_ amet consectetur adipisicing elit. Quisquam deserunt aspernatur repellat harum ut accusantium magni optio temporibus, corrupti id suscipit ipsum in, natus eius? **Ut totam magnam eum molestiae!**",
                    "created_at": "2020-11-15T10:25:12.458+01:00",
                    "updated_at": "2020-11-15T11:43:49.041+01:00"
                  }
        404:
          description: No profile found 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  #News
  /news:
    get:
      tags:
        - News
      summary: Paginated list of news
      description: >
        Returns a paginated list of news available, comments,and likes on the news
        and also the users who made the comments.
      operationId: listNews
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/pageParam"
      responses:
        200:
          description: Ok, successful request
          content:
            application/json:
              schema:
                example:
                  {
                    "meta": {
                        "total": 9,
                        "per_page": 10,
                        "current_page": 1,
                        "last_page": 1,
                        "first_page": 1,
                        "first_page_url": "/?page=1",
                        "last_page_url": "/?page=1",
                        "next_page_url": null,
                        "previous_page_url": null
                     },
                     "data":[
                        {
                          "id": 6,
                          "title": "This is new title",
                          "description": "Qui itaque fugiat odio quibusdam necessitatibus. Molestias debitis corrupti non et harum enim. Ut sunt pariatur eum consectetur.\n \rEt eum et quo facere. Ut repellendus perferendis quo temporibus aut provident. Voluptatem maxime facilis repudiandae quo asperiores. Facere quod corporis ducimus est dignissimos laboriosam. Doloremque ab eum unde rerum minima delectus nobis debitis quo. Impedit sit autem aut consequuntur a aperiam esse laborum.",
                          "category": "general",
                          "created_at": "2020-11-15T18:55:17.966+01:00",
                          "updated_at": "2020-11-15T23:41:30.785+01:00",
                          "is_visible": true,
                          "total_comments": 5,
                          "total_likes": 0,
                          "coverImage":{
                            "id": 12,
                            "url": "https://ik.imagekit.io/trsuszcduc/dangiwa/news/photos/cat6_RXSeK9Ma5.jpg",
                            "file_id": "5fb1aeb232c9df1ac9c77bc1",
                            "thumbnail_url": "https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/dangiwa/news/photos/cat6_RXSeK9Ma5.jpg",
                            "is_gallery": false,
                            "title": null,
                            "description": null,
                            "profile_id": null,
                            "project_id": null,
                            "news_id": 6,
                            "created_at": "2020-11-15T23:41:30.796+01:00",
                            "updated_at": "2020-11-15T23:41:30.796+01:00"
                          },
                          "likes": [],
                          "comments":[
                            {
                              "id": 21,
                              "comment": "Soluta nisi odio dolorum earum commodi itaque quos ut. Voluptatibus exercitationem laudantium adipisci dolores. Quos possimus et fuga aut ipsam odio qui. Est aut earum reiciendis est.",
                              "user_id": 23,
                              "project_id": null,
                              "news_id": 6,
                              "created_at": "2020-11-15T18:55:18.050+01:00",
                              "updated_at": "2020-11-15T18:55:18.050+01:00",
                              'commentor':
                                    {
                                      'id': 23,
                                      'email': 'Roslyn_Hahn@gmail.com',
                                      'phone_number': '956.689.7083 x45382',
                                      'created_at': '2020-11-15T18:55:18.002+01:00',
                                      'updated_at': '2020-11-15T18:55:18.003+01:00',
                                    }
                            }
                          ]
                        }
                     ]
                  }

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /news/search:
    get:
      tags:
        - News
      summary: Paginated list of news matching search param
      description: >
        Returns a paginated list of news available, comments,and likes on the news
        and also the users who made the comments.
      operationId: searchNews
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/searchTextParam"
      responses:
        200:
          description: Ok, successful request
          content:
            application/json:
              schema:
                example:
                  {
                    "meta": {
                        "total": 9,
                        "per_page": 10,
                        "current_page": 1,
                        "last_page": 1,
                        "first_page": 1,
                        "first_page_url": "/?page=1",
                        "last_page_url": "/?page=1",
                        "next_page_url": null,
                        "previous_page_url": null
                     },
                     "data":[
                        {
                          "id": 6,
                          "title": "This is new title",
                          "description": "Qui itaque fugiat odio quibusdam necessitatibus. Molestias debitis corrupti non et harum enim. Ut sunt pariatur eum consectetur.\n \rEt eum et quo facere. Ut repellendus perferendis quo temporibus aut provident. Voluptatem maxime facilis repudiandae quo asperiores. Facere quod corporis ducimus est dignissimos laboriosam. Doloremque ab eum unde rerum minima delectus nobis debitis quo. Impedit sit autem aut consequuntur a aperiam esse laborum.",
                          "category": "general",
                          "created_at": "2020-11-15T18:55:17.966+01:00",
                          "updated_at": "2020-11-15T23:41:30.785+01:00",
                          "is_visible": true,
                          "total_comments": 5,
                          "total_likes": 0,
                          "coverImage":{
                            "id": 12,
                            "url": "https://ik.imagekit.io/trsuszcduc/dangiwa/news/photos/cat6_RXSeK9Ma5.jpg",
                            "file_id": "5fb1aeb232c9df1ac9c77bc1",
                            "thumbnail_url": "https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/dangiwa/news/photos/cat6_RXSeK9Ma5.jpg",
                            "is_gallery": false,
                            "title": null,
                            "description": null,
                            "profile_id": null,
                            "project_id": null,
                            "news_id": 6,
                            "created_at": "2020-11-15T23:41:30.796+01:00",
                            "updated_at": "2020-11-15T23:41:30.796+01:00"
                          },
                          "likes": [],
                          "comments":[
                            {
                              "id": 21,
                              "comment": "Soluta nisi odio dolorum earum commodi itaque quos ut. Voluptatibus exercitationem laudantium adipisci dolores. Quos possimus et fuga aut ipsam odio qui. Est aut earum reiciendis est.",
                              "user_id": 23,
                              "project_id": null,
                              "news_id": 6,
                              "created_at": "2020-11-15T18:55:18.050+01:00",
                              "updated_at": "2020-11-15T18:55:18.050+01:00",
                              'commentor':
                                    {
                                      'id': 23,
                                      'email': 'Roslyn_Hahn@gmail.com',
                                      'phone_number': '956.689.7083 x45382',
                                      'created_at': '2020-11-15T18:55:18.002+01:00',
                                      'updated_at': '2020-11-15T18:55:18.003+01:00',
                                    }
                            }
                          ]
                        }
                     ]
                  }

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /news/{id}:
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      tags:
        - News
      summary: Gets news by its id
      description: >
        Returns news, its comments, likes and users who liked and commented on it. 
        A call to this endpoint isn't entirely necessary because the same data are
        returned from this **/news** endpoint.
      operationId: newsById
      responses:
        200:
          description: >
            Ok, successful. 
          content:
            application/json:
              schema:
               example:
                {
                  'id': 6,
                  'title': 'This is new title',
                  'description': "Qui itaque fugiat odio quibusdam necessitatibus. Molestias debitis corrupti non et harum enim. Ut sunt pariatur eum consectetur.\n \rEt eum et quo facere. Ut repellendus perferendis quo temporibus aut provident. Voluptatem maxime facilis repudiandae quo asperiores. Facere quod corporis ducimus est dignissimos laboriosam. Doloremque ab eum unde rerum minima delectus nobis debitis quo. Impedit sit autem aut consequuntur a aperiam esse laborum.",
                  'category': 'general',
                  'created_at': '2020-11-15T18:55:17.966+01:00',
                  'updated_at': '2020-11-15T23:41:30.785+01:00',
                  'is_visible': true,
                  'total_comments': 5,
                  'total_likes': 0,
                  'coverImage':
                    {
                      'id': 12,
                      'url': 'https://ik.imagekit.io/trsuszcduc/dangiwa/news/photos/cat6_RXSeK9Ma5.jpg',
                      'file_id': '5fb1aeb232c9df1ac9c77bc1',
                      'thumbnail_url': 'https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/dangiwa/news/photos/cat6_RXSeK9Ma5.jpg',
                      'is_gallery': false,
                      'title': null,
                      'description': null,
                      'profile_id': null,
                      'project_id': null,
                      'news_id': 6,
                      'created_at': '2020-11-15T23:41:30.796+01:00',
                      'updated_at': '2020-11-15T23:41:30.796+01:00',
                    },
                  'likes': [],
                  'comments':
                    [
                      {
                        'id': 21,
                        'comment': 'Soluta nisi odio dolorum earum commodi itaque quos ut. Voluptatibus exercitationem laudantium adipisci dolores. Quos possimus et fuga aut ipsam odio qui. Est aut earum reiciendis est.',
                        'user_id': 23,
                        'project_id': null,
                        'news_id': 6,
                        'created_at': '2020-11-15T18:55:18.050+01:00',
                        'updated_at': '2020-11-15T18:55:18.050+01:00',
                        'commentor':
                          {
                            'id': 23,
                            'email': 'Roslyn_Hahn@gmail.com',
                            'phone_number': '956.689.7083 x45382',
                            'created_at': '2020-11-15T18:55:18.002+01:00',
                            'updated_at': '2020-11-15T18:55:18.003+01:00',
                          },
                      },
                    ],
                }
        404:
          description: No users found matching the id parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Suggestion routes
  /suggestions:
    post:
      security:
        - bearerAuth: []
      tags:
        - Suggestions
      summary: Adds a new suggestion
      description: Adds suggestion to the database
      operationId: addSuggestion
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Suggestion"
            example:
              {
                'suggestion': "Atque quisquam ut tempora quae facere possimus rerum. Odit eum repudiandae voluptatem voluptatum magni. Fugit aliquam adipisci et numquam ex. Similique rerum ducimus nesciunt fuga sit. Et nisi illum. Ducimus veritatis nemo quis vel voluptatem hic.\n \rVoluptas quidem dolorum quia quis earum. Quia est facilis praesentium ipsum accusamus adipisci qui laboriosam. Fugit error illo nulla animi ullam.\n \rAccusantium qui ad. Qui laboriosam error beatae id. Perspiciatis voluptatem ipsa sint omnis autem itaque dolor vel. Assumenda omnis eius et voluptate. Enim dolor ut laboriosam ad consectetur reprehenderit. Sed sit quia consequatur quasi est commodi reprehenderit sunt eligendi."
              }

      responses:
        200:
          description: Ok, successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Suggestion"
              example:
                {
                  'suggestion': "Atque quisquam ut tempora quae facere possimus rerum. Odit eum repudiandae voluptatem voluptatum magni. Fugit aliquam adipisci et numquam ex. Similique rerum ducimus nesciunt fuga sit. Et nisi illum. Ducimus veritatis nemo quis vel voluptatem hic.\n \rVoluptas quidem dolorum quia quis earum. Quia est facilis praesentium ipsum accusamus adipisci qui laboriosam. Fugit error illo nulla animi ullam.\n \rAccusantium qui ad. Qui laboriosam error beatae id. Perspiciatis voluptatem ipsa sint omnis autem itaque dolor vel. Assumenda omnis eius et voluptate. Enim dolor ut laboriosam ad consectetur reprehenderit. Sed sit quia consequatur quasi est commodi reprehenderit sunt eligendi.",
                  'id': 1
                }

        422:
          description: Unprocessible entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /suggestions/{id}:
    parameters:
      - $ref: "#/components/parameters/idParam"
    put:
      security:
        - bearerAuth: []
      tags:
        - Suggestions
      summary: Updates a suggestion
      description: >
        Updates a suggestion
      operationId: updateSuggestionById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Suggestion"
            example:
              suggestion: "new suggestion"
      responses:
        200:
          description: Ok, suggestion successfully updated
        404:
          description: Suggestion not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security:
        - bearerAuth: []
      tags:
        - Suggestions
      summary: Deletes a suggestion
      description: >
        Deletes a food suggestion from the database using their id
      operationId: deleteSuggestionById
      responses:
        200:
          description: Ok, suggestion was successfully deleted
        404:
          description: Suggestion not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Pictures routes
  /images:
    get:
      tags:
        - Gallery
      summary: Gets list of paginated pictures in the gallery
      description: >
        Returns the list of pictures in the gallery
      operationId: listPictures
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/pageParam"
      responses:
        200:
          description: Ok, successful request
          content:
            application/json:
              schema:
                example:
                  {
                    "meta": {
                    "total": 9,
                    "per_page": 10,
                    "current_page": 1,
                    "last_page": 1,
                    "first_page": 1,
                    "first_page_url": "/?page=1",
                    "last_page_url": "/?page=1",
                    "next_page_url": null,
                    "previous_page_url": null
                   },
                   "data":[
                     {
                      "id": 21,
                      "url": "https://ik.imagekit.io/trsuszcduc/dangiwa/gallery/photos/dog3_qVnDyXHXP.jpg",
                      "file_id": "5fb2512c32c9df1ac9cc2442",
                      "thumbnail_url": "https://ik.imagekit.io/trsuszcduc/tr:n-media_library_thumbnail/dangiwa/gallery/photos/dog3_qVnDyXHXP.jpg",
                      "is_gallery": true,
                      "title": "Cats",
                      "description": "Two happy buddies",
                      "profile_id": null,
                      "project_id": null,
                      "news_id": null,
                      "created_at": "2020-11-16T11:14:44.786+01:00",
                      "updated_at": "2020-11-16T12:04:54.783+01:00"
                    },
                   ]
                  }

        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /videos:
    get:
      tags:
         - Gallery
      summary: Gets list of paginated videos in the gallery
      description: >
        Returns the list of pictures in the gallery
      operationId: listVideos
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/pageParam'
      responses:
          200:
            description: Ok, successful request
            content:
              application/json:
                schema:
                  example:
                    {
                      'meta':
                        {
                          'total': 9,
                          'per_page': 10,
                          'current_page': 1,
                          'last_page': 1,
                          'first_page': 1,
                          'first_page_url': '/?page=1',
                          'last_page_url': '/?page=1',
                          'next_page_url': null,
                          'previous_page_url': null,
                        },
                      'data':
                        [
                          {
                            'id': 2,
                            'youtube_url': null,
                            'vimeo_video_id': '480203411',
                            'vimeo_uri': '/videos/480203411',
                            'is_vimeo': true,
                            'is_youtube': null,
                            'title': 'Reactjs Intro',
                            'description': 'Reactjs intro description',
                            'created_at': '2020-11-17T09:13:28.048+01:00',
                            'updated_at': '2020-11-17T09:13:28.048+01:00',
                          }

                        ],
                    }

          500:
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

  # # Image routes
  # /images1:
  #   get:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Images
  #     summary: Gets list images
  #     description: >
  #       Returns the list of all image owned by a business/chef.
  #     operationId: listImages
  #     responses:
  #       200:
  #         description: Ok, successful request
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/Image"
  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  #   post:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Images
  #     summary: Adds new image
  #     description: >
  #       Adds new image to the database
  #     operationId: addImage
  #     requestBody:
  #       content:
  #         multipart/form-data:
  #           schema:
  #             type: object
  #             properties:
  #               businessId:
  #                 type: integer
  #               image:
  #                 type: string
  #                 format: binary
  #     responses:
  #       200:
  #         description: Ok, successful
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Image"
  #             example:
  #               id: 2
  #               url: "image.png"
  #               thumbnailUrl: "thumbnail.png"
  #               fileId: "47474839ddde8e8e"
  #               businessId: 5
  #               foodId: null
  #               serviceId: null

  #       422:
  #         description: Unprocessible entity
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  # /images/{id}:
  #   parameters:
  #     - $ref: "#/components/parameters/idParam"
  #   get:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Images
  #     summary: Gets an image by its id
  #     description: >
  #       Returns an image from the database.
  #     operationId: imageById
  #     responses:
  #       200:
  #         description: >
  #           Ok, successful.
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Image"

  #       404:
  #         description: >
  #           No image found matching the id parameter
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  #   delete:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Images
  #     summary: Deletes an image
  #     description: >
  #       Deletes an image from the database using their id
  #     operationId: deleteImageById
  #     responses:
  #       200:
  #         description: Ok, image was successfully deleted
  #       404:
  #         description: Image not found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  #   # Review routes

 
  # # Token routes
  # /tokens:
  #   post:
  #     tags:
  #       - Tokens
  #     summary: Adds new user token
  #     description: >
  #       Registers a user's device token for notifications
  #     operationId: addToken
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/Token"
  #     responses:
  #       200:
  #         description: Ok, successful request
  #         content:
  #           application/json:
  #             schema:
  #               allOf:
  #                 - type: object
  #                   properties:
  #                     id:
  #                       type: integer
  #                 - $ref: "#/components/schemas/Token"
  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"
  # /tokens/{id}:
  #   parameters:
  #     - $ref: "#/components/parameters/idParam"
  #   put:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Tokens
  #     summary: Updates a token
  #     description: >
  #       Updates a token
  #     operationId: updateTokenById
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             required:
  #               - userId
  #             properties:
  #               userId:
  #                 type: integer
  #               role:
  #                 type: string
  #                 enum: ["customer", "vendor", "admin", "agent"]
  #               businessId:
  #                 type: integer
  #           examples:
  #             customer:
  #               value:
  #                 userId: 2
  #                 role: "customer"
  #             vendor:
  #               value:
  #                 userId: 3
  #                 role: "vendor"
  #                 businessId: 1
  #             agent:
  #               value:
  #                 userId: 4
  #                 role: "agent"
  #     responses:
  #       200:
  #         description: Ok, order successfully updated
  #       404:
  #         description: Order not found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  #       500:
  #         description: Internal Server Error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Error"

  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

  schemas:
    User:
      type: object
      description: A user who can either be a vendor,customer, an agent or admin
      required:
        - email
      properties:
        id:
          description: A readonly property
          type: integer
          format: int32
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        address:
          type: string
        phone:
          type: string
        role:
          type: string
          enum: ["admin", "vendor", "agent", "customer"]
          default: "customer"
        user_name:
          description: readonly property
          type: string
    Business:
      type: object
      description: Represents the shop/business/services of a vendor
      properties:
        id:
          description: readonly property
          type: integer
          format: int32
        name:
          type: string
        location:
          type: string
        about:
          type: string
        verified:
          type: boolean
        suspended:
          type: boolean
        userId:
          description: The id of the user this business/shop/service belongs to
          type: integer
          format: int32
        business_type:
          type: string
          enum: ["restaurant", "agent", "chef", "farm_produce"]
    Food:
      type: object
      description: Represents a dish or food item sold by a restaurant or farmer
      properties:
        id:
          description: readonly property
          type: integer
          format: int32
        name:
          type: string
        price:
          type: number
          format: float32
        images:
          type: array
          items:
            type: integer
          minLength: 1
          maxLength: 3
        description:
          type: string
        businessId:
          description: The id of the business entity this food belongs to
          type: integer
          format: int32
        categoryId:
          description: The id of the food category this dish or food item belongs to
          type: integer
          format: int32
    Service:
      type: object
      description: Represents a service offered by a chef or freelancer
      properties:
        id:
          description: readonly property
          type: integer
          format: int32
        name:
          type: string
        charges:
          type: number
          format: float32
        description:
          type: string
        images:
          type: array
          items:
            type: integer
          minLength: 1
          maxLength: 3
        businessId:
          description: The id of the business entity this service belongs to
          type: integer
          format: int32
    Suggestion:
      type: object
      description: Represents a suggestion point
      properties:
        id:
          description: readonly property
          type: integer
          format: int32
        suggestion:
          type: string
        
    Image:
      type: object
      description: Represents an image of a dish or food item
      properties:
        id:
          description: readonly property
          type: integer
          format: int32
        url:
          type: string
        thumbnailUrl:
          type: string
        fileId:
          description: readonly property
          type: string
        businessId:
          description: The id of the business entity this image belongs to
          type: integer
          format: int32
        foodId:
          description: The id of the food item or dish this image could belong to
          type: integer
          format: int32
        serviceId:
          description: The id of the service (which involves preparing dishes) this image could belong to
          type: integer
          format: int32
    Review:
      type: object
      description: Represents a review on a dish or food item
      properties:
        id:
          description: readonly property
          type: integer
          format: int32
        comment:
          type: string
        stars:
          type: integer
          format: int32
        userId:
          description: The id of the customer who dropped the review
          type: string
        foodId:
          description: The id of the food item or dish this review could be meant for.
          type: integer
          format: int32
        serviceId:
          description: The id of the service (which involves preparing dishes) this review could be meant for.
          type: integer
          format: int32
    Order:
      type: object
      description: Represents an order from a customer
      properties:
        id:
          description: readonly property
          type: integer
          format: int32
        totalCharges:
          type: number
          format: float32
        qty:
          description: Quantity of dishes/food items ordered
          type: integer
          format: int32
        status:
          description: The status of the order
          type: string
          enum: ["pending", "completed", "canceled"]
          default: "pending"
        fulfilledAt:
          description: The time the ordered was fulfilled or completed
          type: string
    Ingredient:
      type: object
      description: Represents an ingredient needed by a chef or freelancer to prepare a dish.
      properties:
        id:
          description: readonly property
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        busineesId:
          description: The business/service-provider this ingredient belongs or that added this ingredient to the database
          type: integer
          format: int32
    Payment:
    PaymentInfo:
      type: object
      description: >
        Summarized payment information collected for ordered products
      properties:
        status:
          type: string
        amount:
          type: number
          format: float32
        order_id:
          type: integer
        payment_method:
          type: string
        user_id:
          type: integer
        transaction_id:
          type: string
        transaction_ref:
          type: string
        flutter_ref:
          type: string
    CardPayment:
      type: object
      description: >
        Represents the specific information needed to make payments using bank cards.
      required:
        - card_number
        - cvv
        - expiry_month
        - expiry_year
        - pin
      allOf:
        - $ref: "#/components/schemas/Payment"
        - type: object
          properties:
            card_number:
              type: string
            cvv:
              type: string
            expiry_month:
              type: string
            expiry_year:
              type: string
            pin:
              type: string
    BankPayment:
      type: object
      description: >
        Represents the specific information needed to make payments using bank accounts without card information.
      required:
        - account_bank
        - account_number
      allOf:
        - $ref: "#/components/schemas/Payment"
        - type: object
          properties:
            account_bank:
              description: >
                This is a special number that identifies a customer's bank. A list of these numbers can be obtained using flutterwave api.
              type: string
            account_number:
              type: string
    ProviderLogin:
      type: object
      description: Represents the data required to login or signs up a user using facebook or google
      required:
        - provider
        - token
      properties:
        provider:
          type: string
          enum: ["facebook", "google"]
        token:
          description: facebook access_token or google id_token
          type: string
    Token:
      type: object
      required:
        - token
        - role
      properties:
        token:
          type: string
        role:
          type: string
          enum: ["anonymous", "vendor", "agent", "admin", "customer"]
    HealthTip:
      type: object
      required:
        - tip
      properties:
        id:
          type: integer
        tip:
          type: string
    Error:
      type: object
      description: Represents error
      properties:
        message:
          description: Reason for the error
          type: string
    Orders:
      type: array
      items:
        allOf:
          - $ref: "#/components/schemas/Order"
          - type: object
            properties:
              ordered_foods:
                type: array
                items:
                  $ref: "#/components/schemas/Food"
              ordered_services:
                type: array
                items:
                  $ref: "#/components/schemas/Service"
    OrderedItem:
      type: object
      required:
        - items
        - customerId
        - delivery
      properties:
        items:
          type: array
          items:
            type: object
            required:
              - id
              - price
              - qty
              - businessId
            properties:
              id:
                description: The id of the ordered product
                type: integer

              price:
                description: The selling price of the product
                type: number
                format: float32
              qty:
                description: >
                  The quantity of the product the customer added to cart
                type: integer
              businessId:
                type: integer
        customerId:
          type: integer
        delivery:
          type: string
          enum: ["pickup", "home_delivery"]
    Services:
      type: array
      items:
        allOf:
          - $ref: "#/components/schemas/Service"
          - type: object
            properties:
              images:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
              reviews:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
    Reviews:
      type: array
      items:
        $ref: "#/components/schemas/ReviewWithRelations"
    ServicesWithIngredients:
      type: array
      items:
        allOf:
          - $ref: "#/components/schemas/Service"
          - type: object
            properties:
              images:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
              ingredients:
                type: array
                items:
                  $ref: "#/components/schemas/Ingredient"
              reviews:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
    ReviewWithRelations:
      type: object
      allOf:
        - $ref: "#/components/schemas/Review"
        - type: object
          properties:
            reviewed_food:
              allOf:
                - $ref: "#/components/schemas/Food"
                - type: object
                  properties:
                    category:
                      $ref: "#/components/schemas/Category"
                    images:
                      type: array
                      items:
                        $ref: "#/components/schemas/Image"
            reviewed_service:
              allOf:
                - $ref: "#/components/schemas/Service"
                - type: object
                  properties:
                    images:
                      type: array
                      items:
                        $ref: "#/components/schemas/Image"
            reviewer:
              type: object
              properties:
                id:
                  type: integer
                email:
                  type: string
    Foods:
      type: array
      items:
        allOf:
          - $ref: "#/components/schemas/Food"
          - type: object
            properties:
              category:
                $ref: "#/components/schemas/Category"
              images:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
              reviews:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
    FoodsOnly:
      type: array
      items:
        allOf:
          - $ref: "#/components/schemas/Food"
          - type: object
            properties:
              images:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
    FoodWithReviewer:
      type: object
      allOf:
        - $ref: "#/components/schemas/Food"
        - type: object
          properties:
            business:
              $ref: "#/components/schemas/BusinessWithOwner"
            category:
              $ref: "#/components/schemas/Category"
            images:
              type: array
              items:
                $ref: "#/components/schemas/Image"
            reviews:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/Review"
                  - type: object
                    properties:
                      reviewer:
                        type: object
                        description: The customer that reviewed the item
                        properties:
                          id:
                            type: integer
                          email:
                            type: string
    ServiceWithReviewer:
      type: object
      allOf:
        - $ref: "#/components/schemas/Food"
        - type: object
          properties:
            business:
              $ref: "#/components/schemas/BusinessWithOwner"
            ingredients:
              $ref: "#/components/schemas/Ingredient"
            images:
              type: array
              items:
                $ref: "#/components/schemas/Image"
            reviews:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/Review"
                  - type: object
                    properties:
                      reviewer:
                        type: object
                        description: The customer that reviewed the item
                        properties:
                          id:
                            type: integer
                          email:
                            type: string
    ReviewsAndReviewer:
      type: array
      items:
        allOf:
          - $ref: "#/components/schemas/Review"
          - type: object
            properties:
              reviewer:
                type: object
                description: The customer that reviewed the item
                properties:
                  id:
                    type: integer
                  email:
                    type: string
    BusinessWithOwner:
      type: object
      allOf:
        - $ref: "#/components/schemas/Business"
        - type: object
          properties:
            owner:
              type: object
              description: This is the owner of the business
              properties:
                id:
                  type: integer
                email:
                  type: string
    UserAndRelations:
      type: object
      description: Represents a user with all their possible relationships
      properties:
        id:
          type: integer
        email:
          type: string
        user_name:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
        address:
          type: string
        phone:
          type: string
        business:
          $ref: "#/components/schemas/Business"
        foods:
          $ref: "#/components/schemas/Foods"
        services:
          $ref: "#/components/schemas/Services"
        orders:
          $ref: "#/components/schemas/Orders"
    PageInfo:
      type: object
      description: The meta data of a paginated result from the database
      properties:
        hasNext:
          type: boolean
          default: false
        nextCursor:
          type: string
    PaginatedBusiness:
      type: object
      description: Represents paginated list of businesses from the database
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/BusinessWithOwner"

        pageInfo:
          $ref: "#/components/schemas/PageInfo"
    PaginatedFood:
      type: object
      description: >
        Represents paginated list of dishes or food items from the database
      properties:
        data:
          $ref: "#/components/schemas/Foods"

        pageInfo:
          $ref: "#/components/schemas/PageInfo"
    PaginatedServices:
      type: object
      description: >
        Represents paginated list of services from the database
      properties:
        data:
          $ref: "#/components/schemas/Services"

        pageInfo:
          $ref: "#/components/schemas/PageInfo"
    PaginatedReviews:
      type: object
      description: >
        Represents paginated list of reviews from the database
      properties:
        data:
          $ref: "#/components/schemas/Reviews"

        pageInfo:
          $ref: "#/components/schemas/PageInfo"
    
    UserProfile:
      type: object
      properties:
        email:
          type: string
        phoneNumber:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        otherName:
          type: string
        gender:
          type: string
          enum: ['male','female']
        pollingUnit:
          type: string
        age:
          type: integer
        disability:
          type: string
        state:
          type: string
        lga:
          type: string
        ward:
         type: string
        photo:
          type: string
          format: binary
          


    CustomError:
      type: object
      description: Represents error
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                description: Reason for the error
                type: string


  examples:
    Email:
      value:
        - email: 'example@gmail.com'
          password: 'example'

  parameters:
    searchParam:
      name: searchTerm
      in: query
      description: Search term
      schema:
        type: string
    limitParam:
      name: limit
      in: query
      description: Total number of items to return
      schema:
        type: integer
        format: int32
    verifiedParam:
      name: verified
      in: query
      description: >
        Determines whether to return verified or unverified businesses. A combination
        of both is returned by default.
      schema:
        type: boolean
    suspendedParam:
      name: suspended
      in: query
      description: >
        Determines whether to return a list of businesses under suspension or those that are
        not suspended. A combination of both is returned by default.
      schema:
        type: boolean
    pageParam:
      name: page
      in: query
      description: The page number to return
      schema:
        type: integer
    searchTextParam:
      name: searchTerm
      in: query
      description: The title/description(for news) or firstname/lastname (for users) to search for
      schema:
        type: string
    hasNextParam:
      name: hasNext
      in: query
      description: A boolean to determine whether there are still more items to return
      schema:
        type: boolean
    relationsParam:
      name: relations
      in: query
      description: >
        A list showing all the relationships of an object a consumer wants
        to be returned. 'foods' and 'services' params are mutually exclusive
      schema:
        type: string
        example: "orders,services,foods,reviews,ingredients"
    foodRelations:
      name: relations
      in: query
      description: >
        A list showing all the relationships of an object a consumer wants
        to be returned.
      schema:
        type: string
        example: "reviews,category,business,owner,reviewer"
    serviceRelations:
      name: relations
      in: query
      description: >
        A list showing all the relationships of an object a consumer wants
        to be returned.
      schema:
        type: string
        example: "reviews,ingredients,business,owner,reviewer"
    reviewRelations:
      name: relations
      in: query
      description: >
        A list showing all the relationships of an object a consumer wants
        to be returned.
      schema:
        type: string
        example: "reviewed_food,reviewed_service,reviewer"
    roleParam:
      name: role
      in: query
      description: user role
      schema:
        type: string
        enum: ["customer", "vendor", "agent"]
        default: "customer"
    idParam:
      name: id
      in: path
      required: true
      description: The item id
      schema:
        type: integer
        format: int32
